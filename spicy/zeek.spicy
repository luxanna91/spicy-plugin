# Copyright (c) 2020-2021 by the Zeek Project. See LICENSE for details.

module zeek;

# Note: Retain the formatting here, doc/scripts/autogen-spicy-lib is picking up on that.

%cxx-include = "zeek-spicy/runtime-support.h";

## Triggers a DPD protocol confirmation for the current connection.
public function confirm_protocol() : void &cxxname="spicy::zeek::rt::confirm_protocol";

## Triggers a DPD protocol violation for the current connection.
public function reject_protocol(reason: string) : void &cxxname="spicy::zeek::rt::reject_protocol";

## Returns true if we're currently parsing the originator side of a connection.
public function is_orig() : bool &cxxname="spicy::zeek::rt::is_orig";

## Returns the current connection's UID.
public function uid() : string &cxxname="spicy::zeek::rt::uid";

## Returns the current connection's 4-tuple ID.
public function conn_id() : tuple<orig_h: addr, orig_p: port, resp_h: addr, resp_p: port> &cxxname="spicy::zeek::rt::conn_id";

## Instructs Zeek to flip the directionality of the current connection.
public function flip_roles() : void &cxxname="spicy::zeek::rt::flip_roles";

## Returns the number of packets seen so far on the current side of the current connection.
public function number_packets() : uint64 &cxxname="spicy::zeek::rt::number_packets";

## Adds a Zeek-side child protocol analyzer to the current connection.
##
## analyzer: type of analyzer to instantiate, specified through its Zeek-side
## name (similar to what Zeek's signature action `enable` takes); if not
## specified, Zeek will perform its usual dynamic protocol detection to figure
## out how to parse the data (the latter will work only for TCP protocols, though.)
public function protocol_begin(analyzer: optional<string> = Null) : void &cxxname="spicy::zeek::rt::protocol_begin";

## Forwards protocol data to all previously instantiated Zeek-side child protocol analyzers.
##
## is_orig: true to feed the data to the child's originator side, false for the responder
## data: chunk of data to forward to child analyzer
##
## Note that due to Zeek limitations, any data passed through this function will always
## be forwarded to *all* currently active child analyzers.
public function protocol_data_in(is_orig: bool, data: bytes) : void &cxxname="spicy::zeek::rt::protocol_data_in";

## Signals a gap in input data to all previously instantiated Zeek-side child protocol analyzers.
##
## is_orig: true to signal gap to the child's originator side, false for the responder
## offset: start offset of gap in input stream
## len: size of gap
##
## Note that due to Zeek limitations, any gaps signaled through this function will always
## be forwarded to *all* currently active child analyzers.
public function protocol_gap(is_orig: bool, offset: uint64, len: uint64) : void &cxxname="spicy::zeek::rt::protocol_gap";

## Signals end-of-data to all previously instantiated Zeek-side child protocol
## analyzers and removes them.
public function protocol_end() : void &cxxname="spicy::zeek::rt::protocol_end";

## Signals the beginning of a file to Zeek's file analysis, associating it with the current connection.
## Optionally, a mime type can be provided. It will be passed on to Zeek's file analysis framework.
## Returns the Zeek-side file ID of the new file.
public function file_begin(mime_type: optional<string> = Null) : string &cxxname="spicy::zeek::rt::file_begin";

## Returns the current file's FUID.
public function fuid() : string &cxxname="spicy::zeek::rt::fuid";

## Close the current active connection.
public function close_connection() : void &cxxname="spicy::zeek::rt::close_connection";

## Signals the expected size of a file to Zeek's file analysis.
##
## size: expected size of file
## fid: Zeek-side ID of the file to operate on; if not given, the file started by the most recent file_begin() will be used
public function file_set_size(size: uint64, fid: optional<string> = Null) : void &cxxname="spicy::zeek::rt::file_set_size";

## Passes file content on to Zeek's file analysis.
##
## data: chunk of raw data to pass into analysis
## fid: Zeek-side ID of the file to operate on; if not given, the file started by the most recent file_begin() will be used
public function file_data_in(data: bytes, fid: optional<string> = Null) : void &cxxname="spicy::zeek::rt::file_data_in";

## Passes file content at a specific offset on to Zeek's file analysis.
##
## data: chunk of raw data to pass into analysis
## offset: position in file where data starts
## fid: Zeek-side ID of the file to operate on; if not given, the file started by the most recent file_begin() will be used
public function file_data_in_at_offset(data: bytes, offset: uint64, fid: optional<string> = Null) : void &cxxname="spicy::zeek::rt::file_data_in_at_offset";

## Signals a gap in a file to Zeek's file analysis.
##
## offset: position in file where gap starts
## len: size of gap
## fid: Zeek-side ID of the file to operate on; if not given, the file started by the most recent file_begin() will be used
public function file_gap(offset: uint64, len: uint64, fid: optional<string> = Null) : void &cxxname="spicy::zeek::rt::file_gap";

## Signals the end of a file to Zeek's file analysis.
##
## fid: Zeek-side ID of the file to operate on; if not given, the file started by the most recent file_begin() will be used
public function file_end(fid: optional<string> = Null) : void &cxxname="spicy::zeek::rt::file_end";

## Inside a packet analyzer, forwards what data remains after parsing the top-level unit
## on to another analyzer. The index specifies the target, per the current dispatcher table.
public function forward_packet(identifier: uint32) : void &cxxname="spicy::zeek::rt::forward_packet";

## Gets the network time from Zeek.
public function network_time() : time &cxxname="spicy::zeek::rt::network_time";
